// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/01/2021 14:01:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          four_bit_pc
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module four_bit_pc_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A_in;
reg [3:0] BYTE;
reg [3:0] B_in;
reg clk;
// wires                                               
wire [3:0] A;
wire [3:0] Addr;
wire [3:0] B;
wire [3:0] C;
wire HLT;
wire [3:0] IP;
wire [3:0] OUTPORT;
wire SF;
wire [3:0] SP;
wire ZF;

// assign statements (if any)                          
four_bit_pc i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.A_in(A_in),
	.Addr(Addr),
	.B(B),
	.\BYTE (BYTE),
	.B_in(B_in),
	.C(C),
	.HLT(HLT),
	.IP(IP),
	.OUTPORT(OUTPORT),
	.SF(SF),
	.SP(SP),
	.ZF(ZF),
	.clk(clk)
);
initial 
begin 
#1000000 $finish;
end 
// A_in[ 3 ]
initial
begin
	A_in[3] = 1'b1;
end 
// A_in[ 2 ]
initial
begin
	A_in[2] = 1'b0;
end 
// A_in[ 1 ]
initial
begin
	A_in[1] = 1'b1;
end 
// A_in[ 0 ]
initial
begin
	A_in[0] = 1'b0;
end 
// \BYTE [ 3 ]
initial
begin
	BYTE[3] = 1'b0;
end 
// \BYTE [ 2 ]
initial
begin
	BYTE[2] = 1'b0;
end 
// \BYTE [ 1 ]
initial
begin
	BYTE[1] = 1'b1;
end 
// \BYTE [ 0 ]
initial
begin
	BYTE[0] = 1'b0;
end 
// B_in[ 3 ]
initial
begin
	B_in[3] = 1'b0;
end 
// B_in[ 2 ]
initial
begin
	B_in[2] = 1'b0;
end 
// B_in[ 1 ]
initial
begin
	B_in[1] = 1'b0;
end 
// B_in[ 0 ]
initial
begin
	B_in[0] = 1'b1;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #25000 1'b1;
	#25000;
end 
endmodule

